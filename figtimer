#!/bin/bash

usage() {
    echo "Usage: $0 [-d delimeter] [-n max_times]"
    echo "  -d delimeter between times (e.g. -d ', ' -> [1.1, 2.2, 3.3]). Default - space ([1.1 2.2 3.3])"
    echo "  -n max times. Used for marathons (e.g. -n 21)"
}

delimeter=" "
max_times=1

while getopts ":d:n:h" o; do
    case "$o" in
        d)
            delimeter=$OPTARG
            ;;
        n)
            max_times=$OPTARG
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $o" 1>&2
            usage
            exit 1
    esac
done

clear
if [[ ! $(command -v figlet) ]]; then
    figlet() {
        cat
    }
    echo "Please install figlet to see acsii arted output"
fi
echo "figTimer" | figlet

printf "\ndelimeter: '$delimeter'\n"
if [[ $max_times -gt 1 ]]; then
    printf "Using $max_times solves in a row\n"
fi

format_time() {
    local tt=$1
    local t_ms=$(expr $tt % 100)
    tt=$(expr $tt / 100)
    local t_s=$(expr $tt % 60)
    tt=$(expr $tt / 60)

    # output times
    if [[ $tt -eq 0 ]]; then
        printf "%02d.%02d\n" $t_s $t_ms
    else
        printf "%02d:%02d.%02d\n" $tt $t_s $t_ms
    fi
}

# stats
sum=0
square_sum=0
count=0
best=4294967296
worst=0
alltimes=""

while :; do
    key="k"
    times=0
    while :; do
        printf "\nq - quit | c - copy to clipboard and quit"
        printf "\nHit space to start the timer..."
        read -n1 -r -p "" key
        if [ "$key" = '' ]; then
            ts=$(date +%s%N)
            break
        elif [ "$key" = 'c' ]; then
            echo -n $alltimes | xclip -selection clipboard
            echo "opied"
            exit 0
        elif [ "$key" = 'q' ]; then
            echo "uit"
            exit 0
        fi
    done

    clear
    echo "running" | figlet -W
    printf "\nPress any key to stop..."

    while :; do
        read -n1 -r -p "" key
        times=$(($times + 1))
        if [[ $times -ge $max_times ]]; then
            break
        else
            printf "\nTimes: $times/$max_times"
        fi
    done
    duration=$((($(date +%s%N) - $ts) / 10000000))

    currenttime=$(format_time $duration)
    if [ "$alltimes" == "" ]; then
        alltimes=$currenttime
    else
        alltimes=$alltimes$delimeter$currenttime
    fi

    clear
    printf $currenttime | figlet -W

    count=$(($count + 1))
    printf "\n[$alltimes] ($count) \n\n"

    if [[ $duration -lt $best ]]; then
        best=$duration
    fi
    printf "Best: $(format_time $best)  "

    if [[ $duration -gt $worst ]]; then
        worst=$duration
    fi
    printf "Worst: $(format_time $worst) \n"

    sum=$(($sum + $duration))
    if [[ $count -gt 2 ]]; then
        avg=$((($sum - $best - $worst) / ($count - 2)))
        printf "Avg: $(format_time $avg)  "
    fi

    mean=$(($sum / $count))
    printf "Mean: $(format_time $mean)  "

    if [[ $(command -v bc) ]]; then
        delta=$(($mean - $duration))
        square_sum=$(($square_sum + $delta * $delta))
        variance=$(($square_sum / $count))
        deviation=$(bc <<<"scale=0; sqrt($variance)")
        printf "Standard deviation: $(format_time $deviation)"
    fi
    echo
done
